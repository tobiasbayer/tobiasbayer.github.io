<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Liferay on Tobias Bayer</title>
    <link>http://tobiasbayer.com/categories/liferay/</link>
    <description>Recent content in Liferay on Tobias Bayer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Jun 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tobiasbayer.com/categories/liferay/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting the Liferay User in a Standalone App</title>
      <link>http://tobiasbayer.com/post/2012-06-11-getting-the-liferay-user-in-a-standalone-app/</link>
      <pubDate>Mon, 11 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tobiasbayer.com/post/2012-06-11-getting-the-liferay-user-in-a-standalone-app/</guid>
      <description>&lt;p&gt;You can deploy a standard webapp in &lt;a href=&#34;http://www.liferay.com&#34;&gt;Liferay&lt;/a&gt; without making it a portlet.&lt;/p&gt;

&lt;p&gt;If you do that, it is not so easy to get the currently logged in Liferay user in your standalone webapp.
There is &lt;a href=&#34;https://www.everit.biz/web/guest/everit-blog/-/blogs/getting-current-liferay-user-in-a-standalone-webapp&#34;&gt;another article&lt;/a&gt; which suggests reconstructing the user with the information the Liferay login cookie provides.
This solution has one blemish: It does only work when the user checks the &amp;ldquo;Remember me&amp;rdquo; box at the login screen. Otherwise the cookie won&amp;rsquo;t contain the password that is used in this approach for retrieving the user from Liferay.&lt;/p&gt;

&lt;p&gt;I changed the solution mentioned above to only use the company key and the user id. This works even if the user did not check the &amp;ldquo;Remember me&amp;rdquo; box at the login screen.
I made this a servlet filter which can be easily used by registering it in your &lt;code&gt;web.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what I came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.codebrickie.filter;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.Key;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;

import com.liferay.portal.kernel.util.WebKeys;
import com.liferay.portal.model.Company;
import com.liferay.portal.model.User;
import com.liferay.portal.security.auth.PrincipalThreadLocal;
import com.liferay.portal.security.permission.PermissionChecker;
import com.liferay.portal.security.permission.PermissionCheckerFactoryUtil;
import com.liferay.portal.security.permission.PermissionThreadLocal;
import com.liferay.portal.service.CompanyLocalServiceUtil;
import com.liferay.portal.service.UserLocalServiceUtil;
import com.liferay.util.Encryptor;

public class LiferayUserFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response,
            FilterChain filterChain) throws IOException, ServletException {
        if (request instanceof HttpServletRequest) {
            Cookie[] cookies = ((HttpServletRequest) request).getCookies();
            String userId = null;
            String companyId = null;
            if (cookies != null) {
                for (Cookie c : cookies) {
                    if (&amp;quot;COMPANY_ID&amp;quot;.equals(c.getName())) {
                        companyId = c.getValue();
                    } else if (&amp;quot;ID&amp;quot;.equals(c.getName())) {
                        userId = hexStringToStringByAscii(c.getValue());
                    }
                }

                if (userId != null &amp;amp;&amp;amp; companyId != null) {
                    try {
                        Company company = CompanyLocalServiceUtil.getCompany(Long
                                .parseLong(companyId));
                        Key key = company.getKeyObj();

                        String userIdPlain = Encryptor.decrypt(key, userId);

                        User liferayUser = UserLocalServiceUtil.getUser(Long.valueOf(userIdPlain));
                        
                        // Now you can set the liferayUser into a thread local for later use or 
                        // something like that.

                    } catch (Exception pException) {
                        throw new RuntimeException(pException);
                    }
                }
            }
        }
        filterChain.doFilter(request, response);
    }

    private String hexStringToStringByAscii(String hexString) {
        byte[] bytes = new byte[hexString.length() / 2];
        for (int i = 0; i &amp;lt; hexString.length() / 2; i++) {
            String oneHexa = hexString.substring(i * 2, i * 2 + 2);
            bytes[i] = Byte.parseByte(oneHexa, 16);
        }
        try {
            return new String(bytes, &amp;quot;ASCII&amp;quot;);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
    
    @Override
    public void destroy() {
        
    }
    
    @Override
    public void init(FilterConfig pArg0) throws ServletException {
        
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>