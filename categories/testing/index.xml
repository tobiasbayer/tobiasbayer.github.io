<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Tobias Bayer</title>
    <link>http://tobiasbayer.com/categories/testing/</link>
    <description>Recent content in Testing on Tobias Bayer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Mar 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tobiasbayer.com/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pattern Matching with Pact</title>
      <link>http://tobiasbayer.com/post/2015-03-25-pattern-matching-with-pact/</link>
      <pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tobiasbayer.com/post/2015-03-25-pattern-matching-with-pact/</guid>
      <description>&lt;p&gt;It seems the internet is missing an example of how to match the JSON body against a regex when testing your microservices with &lt;a href=&#34;https://github.com/DiUS/pact-jvm&#34;&gt;Pact-JVM&lt;/a&gt;. So I made one myself.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Our consumer contract expects the provider to return three fields in the response body: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;random&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; can be specified exactly by the consumer, the &lt;code&gt;random&lt;/code&gt;-field cannot. We just know the provider will return a random 6-digit number as a string. So we create a regular expression for that inside a &lt;code&gt;PactDslJsonBody&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
protected PactFragment createFragment(final ConsumerPactBuilder.PactDslWithProvider builder) {
    Map&amp;lt;String, String&amp;gt; headers = new HashMap&amp;lt;&amp;gt;();
    headers.put(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json;charset=UTF-8&amp;quot;);

    DslPart body = 
            new PactDslJsonBody()
                .numberValue(&amp;quot;id&amp;quot;, 1)
                .stringValue(&amp;quot;description&amp;quot;, &amp;quot;This is the description for product 1&amp;quot;)
                .stringMatcher(&amp;quot;random&amp;quot;, &amp;quot;[0-9]{6}&amp;quot;);

    return builder
            .uponReceiving(&amp;quot;a request for product details&amp;quot;)
            .path(&amp;quot;/productdetails/1&amp;quot;)
            .method(&amp;quot;GET&amp;quot;)
            .willRespondWith()
            .headers(headers)
            .status(200)
            .body(body)
            .toFragment();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the consumer test is run, this Pactfile is created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;provider&amp;quot; : {
    &amp;quot;name&amp;quot; : &amp;quot;Product_Details_Service&amp;quot;
  },
  &amp;quot;consumer&amp;quot; : {
    &amp;quot;name&amp;quot; : &amp;quot;Product_Service&amp;quot;
  },
  &amp;quot;interactions&amp;quot; : [ {
    &amp;quot;description&amp;quot; : &amp;quot;a request for product details&amp;quot;,
    &amp;quot;request&amp;quot; : {
      &amp;quot;method&amp;quot; : &amp;quot;GET&amp;quot;,
      &amp;quot;path&amp;quot; : &amp;quot;/productdetails/1&amp;quot;
    },
    &amp;quot;response&amp;quot; : {
      &amp;quot;status&amp;quot; : 200,
      &amp;quot;headers&amp;quot; : {
        &amp;quot;Content-Type&amp;quot; : &amp;quot;application/json;charset=UTF-8&amp;quot;
      },
      &amp;quot;body&amp;quot; : {
        &amp;quot;id&amp;quot; : 1,
        &amp;quot;description&amp;quot; : &amp;quot;This is the description for product 1&amp;quot;,
        &amp;quot;random&amp;quot; : &amp;quot;413558&amp;quot;
      },
      &amp;quot;responseMatchingRules&amp;quot; : {
        &amp;quot;$.body.random&amp;quot; : {
          &amp;quot;regex&amp;quot; : &amp;quot;[0-9]{6}&amp;quot;
        }
      }
    }
  } ],
  &amp;quot;metadata&amp;quot; : {
    &amp;quot;pact-specification&amp;quot; : {
      &amp;quot;version&amp;quot; : &amp;quot;2.0.0&amp;quot;
    },
    &amp;quot;pact-jvm&amp;quot; : {
      &amp;quot;version&amp;quot; : &amp;quot;2.1.7&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that Pact magically replaced the regex with a matching string inside the &lt;code&gt;body&lt;/code&gt; definition. This makes sure the provider-stub returns something useful for the consumer when the consumer tests are run. But when the pact is verified against the provider, Pact will use the regular expression inside &lt;code&gt;responseMatchingRules&lt;/code&gt; instead of just matching against the final string for each field in &lt;code&gt;body&lt;/code&gt; that has a corresponding regex.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using CoverMe with Jenkins</title>
      <link>http://tobiasbayer.com/post/2012-03-06-using-coverme-with-jenkins/</link>
      <pubDate>Tue, 06 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tobiasbayer.com/post/2012-03-06-using-coverme-with-jenkins/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/markbates/cover_me&#34;&gt;CoverMe&lt;/a&gt; is a code coverage tool for Ruby 1.9.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt; for CI, you can display the coverage results in your project overview even though Jenkins does not support the original output format of CoverMe.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and install the Emma plugin via the Plugins page of your Jenkins installation.&lt;/li&gt;
&lt;li&gt;Install CoverMe for your Rails project as described on the project page on &lt;a href=&#34;https://github.com/markbates/cover_me&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit &lt;code&gt;lib/tasks/cover_me.rake&lt;/code&gt; and make the &lt;code&gt;:report&lt;/code&gt; task look like this:
{% codeblock lang:ruby%}
task :report do
require &amp;lsquo;cover_me&amp;rsquo;
CoverMe.config.formatter = CoverMe::EmmaFormatter
CoverMe.config.at_exit = Proc.new {}
CoverMe.complete!
end
```&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure your build job in Jenkins to publish the Emma coverage results from &lt;code&gt;coverage/coverage.xml&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>