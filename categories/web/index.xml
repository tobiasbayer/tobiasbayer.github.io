<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on Tobias Bayer</title>
    <link>http://tobiasbayer.com/categories/web/</link>
    <description>Recent content in Web on Tobias Bayer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Nov 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tobiasbayer.com/categories/web/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Integrating Vaadin 7 and Spring</title>
      <link>http://tobiasbayer.com/post/2012-11-11-integrating-vaadin-7-and-spring/</link>
      <pubDate>Sun, 11 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tobiasbayer.com/post/2012-11-11-integrating-vaadin-7-and-spring/</guid>
      <description>&lt;p&gt;I am currently building an administration interface for &lt;a href=&#34;http://tweetsqueue.com&#34;&gt;TweetsQueue&lt;/a&gt; with Vaadin 7.
Fortunately Spring integration for Vaadin 7 is available as a &lt;a href=&#34;http://vaadin.com/directory#addon/springvaadinintegration&#34;&gt;Vaadin add-on&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Only two simple steps are necessary to get full autowiring support for your Vaadin classes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add the Spring integration as a dependency. Here&amp;rsquo;s the relevant excerpt of my &lt;code&gt;build.gradle&lt;/code&gt;:

//...
repositories {
	mavenRepo url: &#39;http://repo1.maven.org/maven2/&#39;, artifactUrls: [&#39;http://maven.springframework.org/milestone&#39;, &#39;http://maven.vaadin.com/vaadin-addons&#39;]
}


dependencies {
	...
	
	runtime &#39;ru.xpoft.vaadin:spring-vaadin-integration:1.6.2&#39;
	
	...
}
...
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Define the Spring integration servlet and your main UI bean in your &lt;code&gt;web.xml&lt;/code&gt;:

&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;web-app id=&#34;WebApp_ID&#34; version=&#34;2.4&#34;
	xmlns=&#34;http://java.sun.com/xml/ns/j2ee&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
	xsi:schemaLocation=&#34;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&#34;&gt;
	&lt;context-param&gt;
		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
		&lt;param-value&gt;classpath*:applicationContext*.xml&lt;/param-value&gt;
	&lt;/context-param&gt;

	&lt;listener&gt;
		&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
	&lt;/listener&gt;
	
	&lt;servlet&gt;
        &lt;servlet-name&gt;VaadinServlet&lt;/servlet-name&gt;
        &lt;servlet-class&gt;ru.xpoft.vaadin.SpringVaadinServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;beanName&lt;/param-name&gt;
            &lt;!-- 
            	This is the name of your main Vaadin UI class.
            	You should declare it as a prototype-scoped component (e.g. @Component @Scope(&#34;protoype&#34;)).
            --&gt;
            &lt;param-value&gt;mainUI&lt;/param-value&gt; 
        &lt;/init-param&gt;
    &lt;/servlet&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;VaadinServlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
&lt;/web-app&gt;    
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now autowire your views (declared as Spring beans) into your main ui class and display them as needed.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>