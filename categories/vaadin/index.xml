<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vaadin on Tobias Bayer</title>
    <link>http://tobiasbayer.com/categories/vaadin/</link>
    <description>Recent content in Vaadin on Tobias Bayer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Feb 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tobiasbayer.com/categories/vaadin/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Vaadin 7 with Clojure</title>
      <link>http://tobiasbayer.com/post/2013-02-12-using-vaadin-7-with-clojure/</link>
      <pubDate>Tue, 12 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tobiasbayer.com/post/2013-02-12-using-vaadin-7-with-clojure/</guid>
      <description>&lt;p&gt;There are some good examples on how to compose a web application with Clojure and Vaadin &amp;lt; 7.
However, the web application bootstrapping process has changed for Vaadin 7.
In this post I will show you how to create a Clojure/Vaadin 7 web application.&lt;/p&gt;

&lt;p&gt;First we need a &lt;code&gt;web.xml&lt;/code&gt; file in &lt;code&gt;src/main/webapp/WEB-INF&lt;/code&gt; that defines the Vaadin servlet and parametrizes
it with our main UI class.&lt;/p&gt;


&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;web-app xmlns=&#34;http://java.sun.com/xml/ns/javaee&#34;
	xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
	xsi:schemaLocation=&#34;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&#34;
	version=&#34;2.5&#34;&gt;
    &lt;display-name&gt;Clojure Vaadin 7 Application&lt;/display-name&gt;
    &lt;context-param&gt;
        &lt;description&gt;Vaadin production mode&lt;/description&gt;
        &lt;param-name&gt;productionMode&lt;/param-name&gt;
        &lt;param-value&gt;false&lt;/param-value&gt;
    &lt;/context-param&gt;
    &lt;servlet&gt;
        &lt;servlet-name&gt;Clojure Vaadin 7 Application&lt;/servlet-name&gt;
        &lt;servlet-class&gt;com.vaadin.server.VaadinServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;description&gt;Vaadin UI&lt;/description&gt;
            &lt;param-name&gt;UI&lt;/param-name&gt;
            &lt;param-value&gt;cljvaadin7.MyApplicationUI&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Clojure Vaadin 7 Application&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
&lt;/web-app&gt;


&lt;p&gt;As there is no such thing as a class in Clojure, we will use its Java interoperability to create
a Java class that serves as our Vaadin UI main class.&lt;/p&gt;


(ns cljvaadin7.MyApplicationUI
  (import [com.vaadin.ui VerticalLayout Label Button Button$ClickListener Notification])
  (:gen-class
    :extends com.vaadin.ui.UI))


&lt;p&gt;&lt;code&gt;:gen-class&lt;/code&gt; will make the namespace available as a Java class.&lt;/p&gt;

&lt;p&gt;We override the init method of &lt;code&gt;com.vaadin.ui.UI&lt;/code&gt;.
This is the entry point for our web application. &lt;code&gt;init&lt;/code&gt; in &lt;code&gt;com.vaadin.ui.UI&lt;/code&gt;
has only one argument (&lt;code&gt;request&lt;/code&gt;). However, our Clojure &lt;code&gt;-init&lt;/code&gt; function has two arguments.
The reason is that the function will receive &amp;ldquo;&lt;code&gt;this&lt;/code&gt;&amp;rdquo; as the first argument.
Now we can build our UI.&lt;/p&gt;

&lt;p&gt;
(defn- create-button
  [caption action]
  (doto (Button. caption) (add-action action)))

(defn- create-main-layout
  []
  (doto (VerticalLayout.)
	        (.addComponent (Label. &#34;Hello Clojure-Vaadin 7!&#34;))
	        (.addComponent (create-button &#34;Push me!&#34; show-click-message))))

(defn -init
  [main-ui request]
  (doto main-ui (.setContent (create-main-layout))))
&lt;/p&gt;

&lt;p&gt;In Java, button actions are triggered by registering a click handler for the button. We have to do this in
Clojure as well but we will hide the actual &lt;code&gt;ClickListener&lt;/code&gt; and use a more functional approach.
We create a new function &lt;code&gt;add-action&lt;/code&gt; that expects a button and an action as arguments. &lt;code&gt;action&lt;/code&gt; can be any Clojure function
we want to be executed when the button is clicked.
The helper function &lt;code&gt;create-button-click-listener&lt;/code&gt; wraps a Vaadin &lt;code&gt;ClickListener&lt;/code&gt; around the &lt;code&gt;action&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;
(defn- show-click-message
  []
  (Notification/show &#34;Button clicked&#34;))

(defn- create-button-click-listener 
  [action]
  (reify Button$ClickListener 
            (buttonClick 
              [_ evt]
              (action))))

(defn- add-action
  [button action]
  (.addListener button (create-button-click-listener action)))
&lt;/p&gt;

&lt;p&gt;The project file for building with Leiningen (and packaging with Maven) looks like this:&lt;/p&gt;

&lt;p&gt;
(defproject cljvaadin7 &#34;0.1.0-SNAPSHOT&#34;
  :description &#34;Demonstrates how to integrate Clojure and Vaadin 7&#34;
  :url &#34;https://github.com/codebrickie/cljvaadin7&#34;
  :license {:name &#34;Eclipse Public License&#34;
            :url &#34;http://www.eclipse.org/legal/epl-v10.html&#34;}
  :dependencies [[org.clojure/clojure &#34;1.4.0&#34;]
                 [com.vaadin/vaadin-server &#34;7.0.0&#34;]
                 [com.vaadin/vaadin-client-compiled &#34;7.0.0&#34;]
                 [com.vaadin/vaadin-themes &#34;7.0.0&#34;]
                 [javax.servlet/servlet-api &#34;2.5&#34;]]
  :aot [cljvaadin7.MyApplicationUI])
&lt;/p&gt;

&lt;p&gt;You can find the complete project on &lt;a href=&#34;https://github.com/codebrickie/cljvaadin7&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integrating Vaadin 7 and Spring</title>
      <link>http://tobiasbayer.com/post/2012-11-11-integrating-vaadin-7-and-spring/</link>
      <pubDate>Sun, 11 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tobiasbayer.com/post/2012-11-11-integrating-vaadin-7-and-spring/</guid>
      <description>&lt;p&gt;I am currently building an administration interface for &lt;a href=&#34;http://tweetsqueue.com&#34;&gt;TweetsQueue&lt;/a&gt; with Vaadin 7.
Fortunately Spring integration for Vaadin 7 is available as a &lt;a href=&#34;http://vaadin.com/directory#addon/springvaadinintegration&#34;&gt;Vaadin add-on&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Only two simple steps are necessary to get full autowiring support for your Vaadin classes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add the Spring integration as a dependency. Here&amp;rsquo;s the relevant excerpt of my &lt;code&gt;build.gradle&lt;/code&gt;:

//...
repositories {
	mavenRepo url: &#39;http://repo1.maven.org/maven2/&#39;, artifactUrls: [&#39;http://maven.springframework.org/milestone&#39;, &#39;http://maven.vaadin.com/vaadin-addons&#39;]
}


dependencies {
	...
	
	runtime &#39;ru.xpoft.vaadin:spring-vaadin-integration:1.6.2&#39;
	
	...
}
...
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Define the Spring integration servlet and your main UI bean in your &lt;code&gt;web.xml&lt;/code&gt;:

&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;web-app id=&#34;WebApp_ID&#34; version=&#34;2.4&#34;
	xmlns=&#34;http://java.sun.com/xml/ns/j2ee&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
	xsi:schemaLocation=&#34;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&#34;&gt;
	&lt;context-param&gt;
		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
		&lt;param-value&gt;classpath*:applicationContext*.xml&lt;/param-value&gt;
	&lt;/context-param&gt;

	&lt;listener&gt;
		&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
	&lt;/listener&gt;
	
	&lt;servlet&gt;
        &lt;servlet-name&gt;VaadinServlet&lt;/servlet-name&gt;
        &lt;servlet-class&gt;ru.xpoft.vaadin.SpringVaadinServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;beanName&lt;/param-name&gt;
            &lt;!-- 
            	This is the name of your main Vaadin UI class.
            	You should declare it as a prototype-scoped component (e.g. @Component @Scope(&#34;protoype&#34;)).
            --&gt;
            &lt;param-value&gt;mainUI&lt;/param-value&gt; 
        &lt;/init-param&gt;
    &lt;/servlet&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;VaadinServlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
&lt;/web-app&gt;    
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now autowire your views (declared as Spring beans) into your main ui class and display them as needed.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>