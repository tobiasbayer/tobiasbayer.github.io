<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pact on Tobias Bayer</title>
    <link>http://tobiasbayer.com/categories/pact/</link>
    <description>Recent content in Pact on Tobias Bayer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Mar 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tobiasbayer.com/categories/pact/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pattern Matching with Pact</title>
      <link>http://tobiasbayer.com/post/2015-03-25-pattern-matching-with-pact/</link>
      <pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tobiasbayer.com/post/2015-03-25-pattern-matching-with-pact/</guid>
      <description>&lt;p&gt;It seems the internet is missing an example of how to match the JSON body against a regex when testing your microservices with &lt;a href=&#34;https://github.com/DiUS/pact-jvm&#34;&gt;Pact-JVM&lt;/a&gt;. So I made one myself.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Our consumer contract expects the provider to return three fields in the response body: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;random&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; can be specified exactly by the consumer, the &lt;code&gt;random&lt;/code&gt;-field cannot. We just know the provider will return a random 6-digit number as a string. So we create a regular expression for that inside a &lt;code&gt;PactDslJsonBody&lt;/code&gt;.&lt;/p&gt;


@Override
protected PactFragment createFragment(final ConsumerPactBuilder.PactDslWithProvider builder) {
    Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();
    headers.put(&#34;Content-Type&#34;, &#34;application/json;charset=UTF-8&#34;);

    DslPart body = 
            new PactDslJsonBody()
                .numberValue(&#34;id&#34;, 1)
                .stringValue(&#34;description&#34;, &#34;This is the description for product 1&#34;)
                .stringMatcher(&#34;random&#34;, &#34;[0-9]{6}&#34;);

    return builder
            .uponReceiving(&#34;a request for product details&#34;)
            .path(&#34;/productdetails/1&#34;)
            .method(&#34;GET&#34;)
            .willRespondWith()
            .headers(headers)
            .status(200)
            .body(body)
            .toFragment();
}


&lt;p&gt;When the consumer test is run, this Pactfile is created:&lt;/p&gt;

&lt;p&gt;
{
  &#34;provider&#34; : {
    &#34;name&#34; : &#34;Product_Details_Service&#34;
  },
  &#34;consumer&#34; : {
    &#34;name&#34; : &#34;Product_Service&#34;
  },
  &#34;interactions&#34; : [ {
    &#34;description&#34; : &#34;a request for product details&#34;,
    &#34;request&#34; : {
      &#34;method&#34; : &#34;GET&#34;,
      &#34;path&#34; : &#34;/productdetails/1&#34;
    },
    &#34;response&#34; : {
      &#34;status&#34; : 200,
      &#34;headers&#34; : {
        &#34;Content-Type&#34; : &#34;application/json;charset=UTF-8&#34;
      },
      &#34;body&#34; : {
        &#34;id&#34; : 1,
        &#34;description&#34; : &#34;This is the description for product 1&#34;,
        &#34;random&#34; : &#34;413558&#34;
      },
      &#34;responseMatchingRules&#34; : {
        &#34;$.body.random&#34; : {
          &#34;regex&#34; : &#34;[0-9]{6}&#34;
        }
      }
    }
  } ],
  &#34;metadata&#34; : {
    &#34;pact-specification&#34; : {
      &#34;version&#34; : &#34;2.0.0&#34;
    },
    &#34;pact-jvm&#34; : {
      &#34;version&#34; : &#34;2.1.7&#34;
    }
  }
}
&lt;/p&gt;

&lt;p&gt;Note that Pact magically replaced the regex with a matching string inside the &lt;code&gt;body&lt;/code&gt; definition. This makes sure the provider-stub returns something useful for the consumer when the consumer tests are run. But when the pact is verified against the provider, Pact will use the regular expression inside &lt;code&gt;responseMatchingRules&lt;/code&gt; instead of just matching against the final string for each field in &lt;code&gt;body&lt;/code&gt; that has a corresponding regex.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>